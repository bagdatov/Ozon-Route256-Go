// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChgkClient is the client API for Chgk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChgkClient interface {
	HealthCheck(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	ReadTournament(ctx context.Context, in *TournamentRequest, opts ...grpc.CallOption) (*Tournament, error)
	ReadQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*Question, error)
	ReadAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*Answer, error)
	ReadScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*Score, error)
	RandomTournaments(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*RandomResponse, error)
	Begin(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error)
	Submit(ctx context.Context, in *Guess, opts ...grpc.CallOption) (*GuessResponse, error)
	Finish(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type chgkClient struct {
	cc grpc.ClientConnInterface
}

func NewChgkClient(cc grpc.ClientConnInterface) ChgkClient {
	return &chgkClient{cc}
}

func (c *chgkClient) HealthCheck(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.Chgk/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkClient) ReadTournament(ctx context.Context, in *TournamentRequest, opts ...grpc.CallOption) (*Tournament, error) {
	out := new(Tournament)
	err := c.cc.Invoke(ctx, "/api.Chgk/ReadTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkClient) ReadQuestion(ctx context.Context, in *QuestionRequest, opts ...grpc.CallOption) (*Question, error) {
	out := new(Question)
	err := c.cc.Invoke(ctx, "/api.Chgk/ReadQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkClient) ReadAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/api.Chgk/ReadAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkClient) ReadScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := c.cc.Invoke(ctx, "/api.Chgk/ReadScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkClient) RandomTournaments(ctx context.Context, in *RandomRequest, opts ...grpc.CallOption) (*RandomResponse, error) {
	out := new(RandomResponse)
	err := c.cc.Invoke(ctx, "/api.Chgk/RandomTournaments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkClient) Begin(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := c.cc.Invoke(ctx, "/api.Chgk/Begin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkClient) Submit(ctx context.Context, in *Guess, opts ...grpc.CallOption) (*GuessResponse, error) {
	out := new(GuessResponse)
	err := c.cc.Invoke(ctx, "/api.Chgk/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chgkClient) Finish(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/api.Chgk/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChgkServer is the server API for Chgk service.
// All implementations must embed UnimplementedChgkServer
// for forward compatibility
type ChgkServer interface {
	HealthCheck(context.Context, *Ping) (*Pong, error)
	ReadTournament(context.Context, *TournamentRequest) (*Tournament, error)
	ReadQuestion(context.Context, *QuestionRequest) (*Question, error)
	ReadAnswer(context.Context, *AnswerRequest) (*Answer, error)
	ReadScore(context.Context, *ScoreRequest) (*Score, error)
	RandomTournaments(context.Context, *RandomRequest) (*RandomResponse, error)
	Begin(context.Context, *GameRequest) (*GameResponse, error)
	Submit(context.Context, *Guess) (*GuessResponse, error)
	Finish(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedChgkServer()
}

// UnimplementedChgkServer must be embedded to have forward compatible implementations.
type UnimplementedChgkServer struct {
}

func (UnimplementedChgkServer) HealthCheck(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedChgkServer) ReadTournament(context.Context, *TournamentRequest) (*Tournament, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTournament not implemented")
}
func (UnimplementedChgkServer) ReadQuestion(context.Context, *QuestionRequest) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadQuestion not implemented")
}
func (UnimplementedChgkServer) ReadAnswer(context.Context, *AnswerRequest) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAnswer not implemented")
}
func (UnimplementedChgkServer) ReadScore(context.Context, *ScoreRequest) (*Score, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadScore not implemented")
}
func (UnimplementedChgkServer) RandomTournaments(context.Context, *RandomRequest) (*RandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomTournaments not implemented")
}
func (UnimplementedChgkServer) Begin(context.Context, *GameRequest) (*GameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedChgkServer) Submit(context.Context, *Guess) (*GuessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedChgkServer) Finish(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}
func (UnimplementedChgkServer) mustEmbedUnimplementedChgkServer() {}

// UnsafeChgkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChgkServer will
// result in compilation errors.
type UnsafeChgkServer interface {
	mustEmbedUnimplementedChgkServer()
}

func RegisterChgkServer(s grpc.ServiceRegistrar, srv ChgkServer) {
	s.RegisterService(&Chgk_ServiceDesc, srv)
}

func _Chgk_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).HealthCheck(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chgk_ReadTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).ReadTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/ReadTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).ReadTournament(ctx, req.(*TournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chgk_ReadQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).ReadQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/ReadQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).ReadQuestion(ctx, req.(*QuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chgk_ReadAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).ReadAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/ReadAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).ReadAnswer(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chgk_ReadScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).ReadScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/ReadScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).ReadScore(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chgk_RandomTournaments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).RandomTournaments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/RandomTournaments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).RandomTournaments(ctx, req.(*RandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chgk_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).Begin(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chgk_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Guess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).Submit(ctx, req.(*Guess))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chgk_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChgkServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chgk/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChgkServer).Finish(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chgk_ServiceDesc is the grpc.ServiceDesc for Chgk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chgk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Chgk",
	HandlerType: (*ChgkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Chgk_HealthCheck_Handler,
		},
		{
			MethodName: "ReadTournament",
			Handler:    _Chgk_ReadTournament_Handler,
		},
		{
			MethodName: "ReadQuestion",
			Handler:    _Chgk_ReadQuestion_Handler,
		},
		{
			MethodName: "ReadAnswer",
			Handler:    _Chgk_ReadAnswer_Handler,
		},
		{
			MethodName: "ReadScore",
			Handler:    _Chgk_ReadScore_Handler,
		},
		{
			MethodName: "RandomTournaments",
			Handler:    _Chgk_RandomTournaments_Handler,
		},
		{
			MethodName: "Begin",
			Handler:    _Chgk_Begin_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _Chgk_Submit_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _Chgk_Finish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
